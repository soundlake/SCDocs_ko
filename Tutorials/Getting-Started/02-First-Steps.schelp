title:: 02. First Steps
summary:: 슈퍼콜라이더와의 첫만남
categories:: Tutorials>Getting-Started
related:: Tutorials/Getting-Started/00-Getting-Started-With-SC

note::
이 문서는 OSX의 SCapp에 맞추어져 있어요. 특히 단축키와 관련한 단축키들이 문제죠. 원리는 다른 플랫폼에서도 똑같답니다. 다음 도움말 문서를 보시면 다른 에디터에서 어떤 단축키를 쓰면 되는지 나올 거에요. link::Reference/KeyboardShortcuts::
::

section::Hello World, 난 슈콜이야.

새로운 프로그래밍 언어를 배울 때, 'Hello World'라는 간단한 프로그램으로 시작하는 것은, 하나의 전통이에요. 이 포로그램은 'Hello World!'라는 문자를 표시하는 거죠. 출력하는 곳이 어디가 되었든 말이에요. 슈콜에서 문자를 출력하는 창을 '포스트 윈도우(post window)'라고 불러요. 포스트 윈도우는 여러분이 처음 슈콜을 열었을 때 열리는 창들 중 하나죠. 그리고 시작하자 마자 이런저런 내용들이 마구 찍혀 나오는 곳이에요. 아마 슈콜을 처음 켜시면 다음과 같은 내용들이 보일 거에요.

code::
init_OSC
compiling class library..
	  NumPrimitives = 587
	  compiling dir: '/Applications/SC3/SCClassLibrary'
	  pass 1 done
	  Method Table Size 3764776 bytes
	  Number of Method Selectors 3184
	  Number of Classes 1814
	  Number of Symbols 7595
	  Byte Code Size 180973
	  compiled 296 files in 1.34 seconds
compile done
RESULT = 256
Class tree inited in 0.14 seconds
::

이것들이 뭘 의미하는지에 모른다고 너무 걱정하실 필요는 없어요. 그냥 슈콜을 키면 슈콜이 포스트 윈도우를 통해 모종의 정보를 여러분에게 보여준다, 이 정도만 기억하시면 되요. 아, 물론 이 포스트 윈도우에서 우리는 Hello World 프로그램의 결과를 볼 수도 있어요. 그 프로그램의 코드는 아래에 있어요.

code::
"Hello World!".postln;
::

이걸 실행하기 위해서는 커서를 코드가 있는 줄에 놓구요, Shift-Return 또는 Cmd-Return을 치시면 되요.

제대로 실행이 되었다면, 여러분은 포스트 윈도우에서 다음과 같은 내용을 확인할 수 있을 거에요.

code::
Hello World!
Hello World!
::

자, 이제 코드를 좀더 살펴봅시다. 코드의 첫부분을 보세요. code::"Hello World!"::, 이건 String이라고 불리는 emphasis::Object::의 한 종류에요. 객체(object)는 딱히 어려운 게 아니랍니다. 그냥 컴퓨터로 어떤 것, 예를 들어, 몇 글자의 텍스트라던가, 오실레이터 같은 것들을 표현하기 위한 방법 중 하나에요. 그리고 이 객체라는 방법을 통해 여러분은 앞서 말한 텍스트라던가 오실레이터 등을 제어(켜기, 끄기, 나타내기, 지우기 등)할 수도 있고, 그것에 메세지(텍스트의 내용, 오실레이터의 주파수, 진폭 등)를 보낼 수도 있답니다. 더 자세한 것은 나중에 다루겠지만, 지금으로서는 String이라는 객체가 몇 글자의 텍스트를 나타내는 방법이라는 것만 기억해두시면 되요.

두 번째 부분을 봅시다. code::.postln;::라는 코드는 '포스트 윈도우에 나를 출력(하거나 나에 대한 유의미한 설명을)해'라고 말하고 있답니다. postln은 꼭 기억해두세요. 얘는 여러분에게 아~주 유용할 거에요. 이 코드는 거의 모든 슈콜의 코드에 갖다붙일 수 있구요, 아마 여려분은 꽤 많은 정보들을 얻을 수 있을 거에요. 특히 여러분이 코드를 짠 뒤에 버그를 찾아내기 위해 한 단계씩 찾아볼 땐 얘만큼 편리한 아이도 없답니다.

아, 한 번만 실행했는데 두 번이나 출력되었다구요? 슈콜에서는 항상 마지막으로 실행된 것이 포스트 윈도우에 출력된답니다. 그러니 사실은 우리의 첫 예제에서 code::postln:: 부분이 사실은 필요 없어요. code::"Hello World!"::를 실행하는 것만으로도 포스트 윈도우에 출력되었을테니까요. 하지만 다음 예제에서는 code::postln::이 필요하답니다. 다음 코드를 마우스로 드래그해서 두 줄 모두 선택한 다음, 실행시켜 보세요. Shift-Return이나 Cmd-Return, 기억하시죠?

code::
"Hello World!".postln;
"Hello SC!".postln;
::

첫번째 줄인 'Hello World'는 postln을 명시해놓지 않았다면 출력되지 않았을 거에요. 아, 각각의 줄이 세미콜론으로 끝났다는 점도 세겨두세요. 세미콜론은 슈콜에서 코드 라인을 구분하는 기준이랍니다. 만약 위의 코드에서 세미콜론이 없었다면 포스트 윈도우는 에러를 출력했을 거에요.

일반적으로 여러분이 여러 줄의 코드를 한꺼번에 실행시키고 싶다면, 아래의 예제처럼 괄호로 코드를 감싸는 방법이 있어요. 슈콜에서는 괄호를 더블클릭하면, 괄호 내부가 선택된답니다. 괄호 내부 어디서든 Cmd-Return을 하면, 괄호 내부 전체가 선택되면서 실행되기도 합니다. 일단 아래의 예제에 대해 한번 연습해보세요.

code::
(
"Call me,".postln;
"Ishmael.".postln;
)
::

코드가 괄호로 둘러쌓여있지 않다면, 그 코드는 한 줄씩 실행되어야 할 코드일 가능성이 높아요.

괄호로 쌓여진 코드들은 각 줄마다 세미콜론으로 끝난다는 점 꼭 주의하셔야 해요. 슈콜에서는 여러 줄의 코드를 실행할 때 세미콜론이 있어야 그 여러 줄을 각각 인식해요. 세미콜론이 없다면, 포스트 윈도우에는 에러가 출력될 뿐이죠.

code::
(
"Call me?".postln
"Ishmael.".postln;
)
::

위의 코드 예제를 실행시켜 보면, 아마도 포스트 윈도우에 'Parse Error'라는 에러 메세지가 들 거에요. 이런 종류의 에러와 관련해서, 에러 메세지의 점은, 슈콜이 어디에서 문제를 일으켰는지를 보여주죠. 여기서는 "Ishmael." 바로 다음에서 문제가 발생해요.

code::
ERROR: syntax error, unexpected STRING, expecting DOTDOT or ':' or ','
or ')'
in file 'selected text'
line 3 char 10:

"Ishmael.".postln;
^^^^^^^^^
)
::

사실 문제는 대부분 메세지가 알려주는 곳보다 조금 전에 일어나 있는 경우가 많아요. 바로 그 부분을, 여러분이 확인해야 하는 거죠. 물론 이 경우는, 에러 메세지가 보여준 것 바로 전 코드 라인에서, 세미콜론이 빠졌기 때문이에요.

세미콜론을 사용하면, 여러 줄의 코드를 한 줄에 쓸 수도 있어요. 그렇게 하면 좀더 쉽게 실행시킬 수도 있지요.

code::
"Call me ".post; "Ishmael?".postln;
::

포스트 윈도우에 대해 몇 가지 더 정리하고 가십시다. 종종 포스트 윈도우에 내용이 꽉 차서 더 이상 뭔가를 읽거나 찾기가 불편할 때가 있어요. 이럴 땐 Cmd-Shift-k를 누르시면 포스트 윈도우의 내용이 지워집니다.

section::슈콜의 세상

슈콜은 사실 두 개의 프로그램으로 이루어져 있어요. 하나는 클라이언트라고 부르는 어플리케이션이죠. 지금 여러분이 보시는 프로그램이에요. 그리고 다른 하나는 서버에요. 바로 서버에서 실제로 소리의 합성이나 계산이 이루어져요. 클라이언트는 메뉴, 문서 윈도우, GUI 등을 포함하는 매우 정교한 프로그래밍 언어에요. 서버는 좀더 어렵고, 불친절하지만 무척 효율적인 UNIX의 커멘드라인 어플리케이션이에요. 커멘드라인 어플리케이션이란 건, 멋진 GUI 같은 건 없다는 뜻이죠.

클라이언트와 서버는 Open Sound Control (OSC)라는 프로토콜을 이용해 서로 메세지를 전달합니다. 이 OSC는 UDP나 TCP라는 프로토콜을 이용하는데, 이 두 프로토콜은 인터넷에서 사용되는 네트워크 프로토콜입니다. 네트워크라는 말 때문에 슈콜의 클라이언트와 서버가 서로 다른 컴퓨터에서 작동된다고 생각하진 마세요. (물론 서로 다른 두 컴퓨터에서도 사용가능 합니다. 그리고 그럴 경우에 그에 따른 장점도 분명히 있어요.) 아, 그리고 하나의 컴퓨터에서도 클라이언트와 서버가 각각 작동할 수 있으니 굳이 인터넷에 연결되어 있을 필요도 없지요. (물론 인터넷을 통해 세계 어디 있는 컴퓨터와도 슈콜을 통해 사운드를 만들어낼 수 있지만요.) 대부분의 경우엔 슈콜의 클라이언트와 서버는 하나의 컴퓨터에서 작동한답니다. 그리고 네트워크라는 부분은 여러분이 슈콜을 익히시는 동안 그다지 느끼시지 못할 거에요.

실제로 작동하기는, 슈콜은 네트워크를 통해서만 OSC 프로토콜의 메세지를 주고받을 수 있어요. 하지만 클라이언트 어플리케이션에는 서버가 가진 내용들을 표현해주는 매우 파워풀한 객체들이 있어서 서버의 내용들을 여러분이 쉽고 우아하게 제어할 수 있도록 도와준답니다. 슈콜이 정확히 어떻게 작동하는지 이해하는 건, 슈콜을 마스터하기 위한 아주 험난한 길이 될 거에요. 그러니 우리는 이 튜토리얼을 통해서 어느 정도까지만 이야기하도록 하십시다.

일단 먼저, 좀 즐겁게 가 보도록 하죠. 슈콜은 무엇보다 소리를 만드는 거니까요.

더 많은 정보들은 기회가 된다면 한 번 보세요.

link::Guides/How-to-Use-the-Interpreter::, link::Reference/Literals::,
link::Classes/String::, link::Guides/ClientVsServer::,
link::Reference/Server-Architecture::

section::연습한 번 해 볼까요?

Cmd-n을 누르거나 File 메뉴에서 New를 클릭해 새로운 문서를 열어봅시다. 위에서 보았던 코드들을 복사해서 새 문서에 복사한 다음 실행 한 번 시켜보세요. Cmd-c, Cmd-v 하셔도 되고, Edit 메뉴를 활용하셔도 되요.

슈콜에서는 도움말이나 문서를 여러분이 수정할 수 있어요. 도움말이나 문서는 원본인 상태로 있는 게 좋겠죠? 그러니 가능하면 도움말이나 문서의 예제 코드는 수정하기 전에 이렇게 새 문서에 복사를 한 다음 새 문서에서 수정하세요.

따옴표 안에 있는 내용을 바꿔가며 실험을 해보세요. 포스트 윈도우에 어떻게 출력이 되는지 확인해보세요. 드래그로 여러 줄을 선택해서도 해보시고, 괄호로 여러 줄을 감싼 다음 Cmd-Return으로도 실행시켜보세요.

____________________

이 문서는 strong::슈퍼콜라이더 시작하기:: 튜토리얼의 일부분입니다.

아래를 클릭하면 다음 섹션으로 넘어갑니다.
link::Tutorials/Getting-Started/03-Start-Your-Engines::

아래를 클릭하면 목차로 넘어갑니다.
link::Tutorials/Getting-Started/00-Getting-Started-With-SC::
